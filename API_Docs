This document describes the API on the HCSPortManager object that UIs use
to communicate with the HCS II controller. Note that since this is a Beta
version of the software the signatures of these methods may change based
on user feedback.

Modifying anything but the UIs is discouraged. The desire is to keep a
common javahost application so that everyone will be able to share UIs.

To write a UI for the JavaHost application you must use the API that is
provided by the HCSPortManager class. An HCSPortManager object is the
only argument passed to the constructor of your UI object. You can then
use it to access the API.

Some methods can fail with an HCSException. This is a class derived from
Exception. HCSException.getCause() will return an integer describing the
exception (such as HCSException.BADOPEN), and as with all exceptions
HCSException.getMessage() will return a String describing the exception
in more detail.

Before writing a new UI it should be properly thought out. The most important
detail is that the main component of the UI (that which updates a window, or
outputs a file) should run in a separate thread than that which receives the
events from the controller. HCSSwingGUI.java demonstrates this, though
unfortunately at this time the simpler UIs do not.

Below are listed and described the methods in the API.

public Vector getPortList()
    This method returns a java.util.Vector containing a list of Strings
    naming the available ports on your computer. (In the initial version
    these will only be the serial ports, but future versions could contain
    other ports.) In general a UI would use these strings in a some sort
	of dialog to allow the UI user to select the port of interest.

public void openPort(String portName) throws HCSException
    Once the user has selected one of the ports named in the getPortList()
    Vector, that name is passed to openPort() to open the port and start
    receiving data from the HCS controller. This call requests the controller
    to send its current state immediately. If an error occurs openPort()
    returns one of the following HCSExceptions:
      HCSException.INVALIDARGUMENT - The argument does not name an available
                                     port.
      HCSException.BADOPEN - The JavaHost failed to open the port, likely
                             because some other application already has the
                             port opened.
      HCSException.BADINITIALIZATION - The JavaHost failed to initialize
                             the port properly.

public Class loadClass(String path, String name) throws HCSException
    The JavaHost was developed with Java 1.1 which unfortunately does not
    have the URLClassLoader class which was introduced with Java2.0. So
    to load the UI plug-ins (i.e. classes) this method is provided. It allows
    UIs (which are dynamically loaded) to dynamically load additional
    components. The Java XPress Compiler is loaded by one of the UIs this
    way.

	The first argument is the file path to the class to be loaded and the
    second argument is the name of the class to be loaded (without the
    ".class" suffix). The path can either be absolute, or relative to
    the current directory.

	This method can raise the following exceptions:
      HCSException.BADCLASS - The specified class could not be found.

public void loadUI(String path, String name)
		throws HCSException, NoSuchMethodException, InstantiationException,
			IllegalAccessException, InvocationTargetException
    This method loads a UI class which is a class using this API. The class
    is loaded and the constructor is invoked so that the object starts.

    This method may throw:
        HCSException.BADCLASS - The specified class could not be found.
		NoSuchMethodException - The constructor cannot be found
		InstantiationException - Instantiation of the UI object failed.
		IllegalAccessException - Unable to access constructor (i.e. it is
            private or protected).
		InvocationTargetException - The constructor threw an exception.

public void registerMenuBar(Object menu)
public Object getMenuBar()
    A main UI object can register its menuBar object with the API so that other
    UI objects can share the same menuBar. Since there are all sorts of
    different menuBar objects (AWT, Swing, etc.) it will be necessary for the
    code using the menuBar to check that it knows the type of menuBar and casts
    appropriately. This could limit UI objects to working only with particular
    UI toolkits.

public void addEventListener(int type, HCSEventListener listener)
public void removeEventListener(int type, HCSEventListener listener)
    These two methods are used to register or remove event listeners which
    listen to events generated by the HCS II controller. You declare an
    HCSEventListener object either as an anonymous class or, if the
    functionality of the class is complex, as a named class (see the example
    UIs for examples). Each time an event of a specific type occurs all
    listeners registered to receive that event will be called. There can be
    any number of listeners for an event, this way several different UI
    classes can be loaded at one time doing different things (for example
    one UI could just log events as they come in while another displays them
    in some fancy GUI).

    Note that the JavaHost is multithreaded. The JavaHost invokes the
    event listener from one of several threads, so it is vital that if you
    have multiple event listeners sharing a single resource, access to that
    resource should be synchronized. (And for the sake of your application
    it should be synchronized as efficiently as possible!)

	As well your code should be as efficient as possible. The controller
    restarts sending events every second. If your code takes a significant
    portion of a second to do its work, all sorts of nasty things can happen
    (input overrun, thread starvation, ...). A simple solution is to have
    your event listeners do no more than copy data out of the event and into
    local storage which is then queried by a separate UI thread.

    The HCSEventListener interface is simply:

		public interface HCSEventListener
		{
			public void portEvent( HCSEvent event );
		}

	You implement this interface in your class, providing a portEvent()
    method.

	An HCSEvent has the following fields. How they are used is descibed
    below.
	  public int type;
	  public byte[] rawdata;
	  public int year, month, day, dow, hour, minute, second, millisecond;
	  public int module, unit, state;
	  public byte[] bytes;
	  public String message;

    When registering an event listener, you specify one of the following
    types of event to listen to:

      HCSEvent.ALL - Listen to all events. The HCSAsciiUI example does this.
                     The event type will be one of the following masked with
                     HCSEvent.RAW indicating that the event has not been
                     interpreted and is exactly what the controller sent.
                     This data will be in the rawdata byte array. For all
                     other event types the rawdata array will contain the
                     raw data, but additional fields will be filled with
                     interpreted data.
      HCSEvent.TIME - The year, month, etc. fields will be set to the current
                      time as reported by the controller.
      HCSEvent.X10MODULES - The unit field will contain the X10 housecode
                            generating the event (ASCII 'A' through 'P')
                            while the state field contains the state of the
                            16 units of the housecode (bit 0 is unit 1, ...
                            bit 15 is unit 16). A 0 means the unit is off,
                            a 1 means the unit is on. The HCS controller has
                            no means to specify brightness or dimness levels
                            of X10 light modules.
      HCSEvent.DIGITALINPUTS - The unit field will contain the input group
                               and the state field will contain the state
                               of the inputs. See the HCS II manual for a
                               detailed description of how to interpret this
                               data.
      HCSEvent.DIGITALOUTPUTS - ditto.
      HCSEvent.NETBITS - ditto.
      HCSEvent.ANALOGINPUTS - The unit field will contain the group while the
                              values array will contain the values of the
                              inputs or outputs in the group. For ADCs there
                              will be 8 channels, low channel first. For DACs
                              there will be 4 channels.
      HCSEvent.ANALOGOUTPUTS - ditto.
      HCSEvent.NETWORKMODULES - The module field will contain the network
                                module raising the event (0: PL, 1:MCIR,
                                2:LCD, 3:DIO, 4:ADIO, 5:DIO+). The unit
                                field will contain the module number, and
                                the state field will contain the state of
                                the device (0:timeout, 1:active, 2:err).
      HCSEvent.CONSOLEMESSAGE - The message field will contain the console
                                message string.
      HCSEvent.UNKNOWN - An unknown event has occurred. Usually this signals
                         that the port has started overrunning itself.
      HCSEvent.INPUTOVERRUN - This event type indicates that the port has
                              started to overrun itself. When this occurs
                              you should remedy the situation that has lead
                              to this situation. (It could mean that more
                              time is spent handling events than is spent
                              reading them.)

public byte[] sendCommand(byte cmd, byte[] data) throws HCSException
    This is the lowest level command for sending a command to the HCS II.
    It allows the developer to send all types of HCS II commands to the
    controller, but requires the developer to pack the data according to
    the HCS II manual. The HCSAscii UI demonstrates sending all these commands.
    The input values are not checked for validity when using sendCommand().

    The byte commands defined in HCSPortCommunicator are:
      CMDRESET - reset the controller, no data necessary.
      CMDINFO - request a full information update from the controller.
      CMDSETTIMEFREQUENCY - set the frequency the controller reports the time.
         The single data byte is one of 0:OFF, 1:every second, 2: every minute.
      CMDGETTIME - returns the controller's current time setting. Eight BCD
         coded bytes are returned providing hundredths of a second, second,
         ..., year (00-99).
      CMDSETTIME - Sets the controller's time. The input byte array must
         contain the time. The array should be coded as for CMDSETTIME.
      CMDLOAD - Upload a program to the controller. The byte array contains
         the program.
      CMDCLEARLOG - Clears the controller log.
      CMDGETLOGSIZE - Sets the size of the log. Requires two data bytes
         representing the size (0-4095) in low byte, high byte order.
      CMDGETLOG - Returns the controller log.
      CMDSETLOG - Puts a byte in the controller log. First byte is the value
         to place in the log and the second two are the location (low byte
         first).
      CMDSETX10DISPLAY - Select which X10 housecodes to display. Two input
         bytes are used each used as bit vectors, the first for housecodes
         A-H and the second for housecodes I-P.
      CMDGETX10STATUS - Get the status of a single X10 module. A single input
		byte is used, with the upper nibble representing the house code (A-P,
		0-15), and the lower nibble represents the unit (1-16 mapped to 0-15).
		Returns a two byte array, the first byte being the module passed in and
        second is 0 indicating the module is off, or 1 indicating it is on.
      CMDSETX10MODULE - Three bytes are passed in, none are returned. The first
        byte is coded as in CMDGETX10STATUS, the second if one of 0:all off,
        1:all on, 2:on, 3:off, 4:dim, 5: brighten. The third byte represents
        the dim or brightness count (0-31).
      CMDSETDIGINDISPLAY - Four bytes are passed in, none are returned. See the
        HCSII manual for the description of the bytes.
      CMDGETDIGINSTATUS - Gets the status of a digital input. One byte is input
        two are returned. The input byte indicates which input to query (0-255)
        and the two bytes returned are first the input queried, and its state
        0:off, 1:on.
      CMDSETDIGINSTATE - Sets the status of a digital input. Two bytes are
        input, none are returned. The first byte is the input to set, and the
        second is the value to set, 0:off, 1:on, 2:transparent.
      CMDSETDIGOUTDISPLAY - Functions identically to CMDSETDIGINDISPLAY.
      CMDGETDIGOUTSTATUS - Functions identically to CMDGETDIGINSTATUS.
      CMDSETDIGOUTSTATE - Functions identically to CMDSETDIGINSTATE.
      CMDSETADCDISPLAY - Selects the ADCs to display. See the HCS II
        manual for a description of the three input bytes. No data is returned.
      CMDGETADCVALUE - Get the value for an ADC. The single input byte is
        the ADC to query (0-135). Three bytes are returned, the first being the
        ADC queried, and the second and third being the low byte and high byte
        of the ADC.
      CMDSETADCVALUE - Set the value on an ADC. Three bytes are input, none are
        returned. The first is the ADC to set (0-135) and the second and third
        are the low byte and high byte of the value (0-4095, 4096:transparent).
      CMDSETDACDISPLAY - Functions similarly to CMDADCDISPLAY, though only
        a single input byte is used.
      CMDGETDACVALUE - Functions similarly to CMDGETADCVALUE. However there
        are only 31 DACs, and no transparency.
      CMDSETDACVALUE - Functions similarly to CMDSETADCVALUE.
      CMDSETNETMODULEDISPLAY - Select the netmodules to display. One input byte
        is required, none are returned. The input byte contains a bit map
        representing the network modules to display. Bit 0:PL, 1:MCIR, 2:LCD,
        3:DIO, 4:ADIO, 5:DIO+.
      CMDGETNETMODULESTATUS - Get the status for a network module. One byte
        is input, two are returned. In the upper nibble of the input byte
        place the network module, the lower nibble is the module. The first
        byte returned is an echo of the input byte, the second is the state
        of the module, 0:timeout, 1:active, 2:error.
      CMDSETNETBITDISPLAY - Functions similarly to CMDSETDIGINSTATUS, but has
        five input bytes.
      CMDGETNETBITSTATUS - Functions similarly to CMDGETDIGINSTATUS.
      CMDSETNETBITSTATE - Functions similarly to CMDSETDIGINSTATE.
      CMDGETVARIABLEVALUE - Gets the value of a variable. One input byte is
        used, three are returned. The input byte is the variable number, as is
        the first output byte. The second and third output values are the
        variable value as low byte, high byte.
      CMDSETVARIABLEVALUE - Sets the value of a variable. Three input bytes
        are used (in the same manner as the output bytes of CMDGETVARIABLEVALUE)
        and no bytes are returned.
      CMDSETNETWORKSTRING - Sends a string to the network. The input bytes
        represent a null (ASCII 0) terminated string of ASCII characters.
      CMDSETVOICESTRING - Send a string to the voice module. The input is
        identical to the CMDSETNETWORKSTRING.

	This method can raise the following exceptions:
      HCSException.PAUSED - The controller is paused.
      HCSException.BADRELEASE - Unable to gain access to the controller.
      HCSException.BADWRITE - The write to the controller failed.

public void pause() throws HCSException
    Request the controller to pause its generation of status information.
    This might be done to deal with an INPUTOVERRUN event or could be used
    to set up a polling model for the controller.

    This method may throw:
      HCSException.NOTOPEN - The port was not opened prior to attempting
          this function.

public void resume() throws HCSException
    Request the controller to resume sending output after a pause(). This
    command automatically requests the controller for full information
    using CMDINFO. This method may throw:
      HCSException.NOTOPEN - The port was not opened prior to attempting
          this function.
      Any of the exceptions thrown by sendCommand().


The remaining functions all throw the same exceptions as sendCommand() as
well as any others that may be listed.

public void getInfo() throws HCSException
    Requests the controller to send a complete information update.

public void clearLog() throws HCSException
	Clears the controller log.

public int getLogSize() throws HCSException
    Returns the size of the controller log.

public byte[] getLog() throws HCSException
    Returns the controller log as an array of bytes.

public void setNetbitState( int netbit, boolean state ) throws HCSException
    Sets the state of a netbit.

public boolean getNetbitState(int netbit) throws HCSException
    Returns the state of a netbit. May additionally throw:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.

public void selectNetbitsToDisplay(long bits) throws HCSException
    Selects the netbits to display. Use the single input long to describe
    the bits to display. (See the HCS II manual for defining the net bits
    bitmap.)

public int getNetModuleStatus(int module, int unit) throws HCSException
    Get the status of a network module. The module must be between 0 and 5,
    where 0 is PL, 1:MCIR, 2:LCD, 3:DIO, 4:ADIO, and 5 is DIO+. The unit must
    be between 0 and 7. The return value will be 0:timeout, 1:active, 2:err.
    Additionally throws:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.

public void selectNetModulesToDisplay(int modules) throws HCSException
    Select the net modules to display. The input, representing the network
    modules to display has the following bits Bit 0:PL, 1:MCIR, 2:LCD,
    3:DIO, 4:ADIO, 5:DIO+.

public void setAnalogOutputValue(int dac, int value) throws HCSException
	Set the value of a DAC. 'dac' must be between 0 and 31 (inclusive) and
    the value must be between 0 and 4095 (inclusive). This method can
    additionally throw:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public int getAnalogOutputValue(int dac) throws HCSException
    Get the value of a DAC. 'dac' must be between 0 and 31 (inclusive).
    Additional exceptions thrown by this method are:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void selectAnalogOutputsToDisplay(int dacs) throws HCSException
    Select the analog outputs to display. 'dacs' must be a bitmap as
    specified in the HCS II manual. The additional exception thrown is:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void setAnalogInputValue(int adc, int value) throws HCSException
    Set the value of an ADC. 'adc' must fall between 0 and 135 and the
    value must fall between 0 and 4096. This method throws the additional
    expection:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public int getAnalogInputValue(int adc) throws HCSException
    Get the value of an ADC. 'adc' must fall between 0 and 135. The result
    will be between 0 and 4096.
    Additional exceptions thrown by this method are:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void selectAnalogInputsToDisplay(int adcs) throws HCSException
    Select the analog inputs to display during periodic updates. The 'adcs'
    must be a bitmap as specified in the HCS II manual. That is bit 0 controls
    the display of inputs 0-7, bit 1 controls the display of inputs 8-15, etc.
    up to bit 23 which controls the display of inputs 184-191. Note though that
    while it is possible to control up to 191 inputs this way, only inputs up to
    135 are currently supported. Values of 'adcs' outside the range 0 to 0xFFF
    will generate:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void setDigitalOutputState(int output, int state) throws HCSException
	Set the state of a digital output. The output should be between 0 and 255
    and the state should be 0:off, or 1:on. If any of these falls outside the
    range the following exception is thrown:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public int getDigitalOutputState(int output) throws HCSException
    Get the state of a digital output. The output should be between 0 and 255.
    The returned state will be 0:off, or 1:on. Additional exceptions possible
    with this method are:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void selectDigitalOutputsToDisplay(int outputs) throws HCSException
    Select the digital outputs to display during periodic updates. The 'outputs'
    must be a bitmap as specified in the HCS II manual. That is bit 0 controls
    the display of outputs 0-7, bit 1 controls the display of outputs 8-15, etc.
    up to bit 31 which controls the display of outputs 248-255. Values of
    'outputs' outside the range 0 to 0xFFFF will generate:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void setDigitalInputState(int input, int state) throws HCSException
	Set the state of a digital input. The 'input' should be between 0 and 255
    and the state should be 0:off, 1:on, or 2:transparent. If any of these
    falls outside the range the following exception is thrown:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public int getDigitalInputState(int input) throws HCSException
    Get the state of a digital input. The 'input' should be between 0 and 255.
    The returned state will be 0:off, or 1:on. Additional exceptions possible
    with this method are:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void selectDigitalInputsToDisplay(int inputs) throws HCSException
    Select the digital inputs to display during periodic updates. The 'inputs'
    must be a bitmap as specified in the HCS II manual. That is bit 0 controls
    the display of inputs 0-7, bit 1 controls the display of inputs 8-15, etc.
    up to bit 31 which controls the display of inputs 248-255. Values of
    'inputs' outside the range 0 to 0xFFFF will generate:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public int getVariable(int variable) throws HCSException
    Get the value of a variable. The variable number must be between 0
    and 127 and the return value will be between 0 and 65535. Additional
    exceptions thrown by this method are:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void setVariable(int variable, int value) throws HCSException
    Set the value of a variable. The variable number must be between 0
    and 127 and the value must be between 0 and 65535. Additional
    exceptions thrown by this method are:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void sendNetworkString(String string) throws HCSException
    Send the string to the network.

public void sendVoiceString(String string) throws HCSException
    Send the string to a voice module.

public void setX10Module(int code, int unit, int command, int level)
		throws HCSException
	Sets the state of an X10 device. 'code' is the house code A-P (1-16),
    and unit is the unit at that house code (1-16). 'command' is one of
    0 (all off), 1 (all on), 2 (on), 3 (off), 4 (dim), 5 (brighten). 'level'
    is the dimness or brightness level (0-31). This method will additionally
    throw:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public boolean getX10Status(int code, int unit) throws HCSException
    Get the on/off state of an X10 device. The code is 1 through 16
    representing house codes 'A' through 'P'. 'unit' is the X10 unit 1 through
    16. Returns false if the unit is off, true if it is on. This method
    additionally throws:
      HCSException.RESPONSEMISMATCH - The response from the controller does
        not match the command sent.
      HCSException.BADRESPONSESIZE - The size of the response was not what was
        expected.
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public void selectX10Display(int code) throws HCSException
    Select the X10 housecodes to display. 'code' is a bitmap with bit 15
    being house code 'A', bit 14 house code 'B', ... bit 0 house code 'P'.
    Setting a bit will cause its state to be reported by the controller.

public void load(String filename) throws HCSException
    Load an XPRESS binary program into the controller. The filename must be
    a properly qualified. Additional exceptions thrown by this method are:
      HCSException.BADOPEN - Failed to open the file.
      HCSException.INCOMPLETEREAD - Failed to read the entire file.
      HCSException.BADREAD - Failed to read the file properly.
      HCSException.BADCLOSE - Failed to close the file properly after reading.

public void setLog(int location, int value) throws HCSException
    Set the value of a log byte. The location must be between 0 and 65535
    and the value must be between 0 and 255. This method will additionally
    throw:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.

public Calendar getTime() throws HCSException
    Get the time from the controller. The time is returned in a
    Calendar object.

public void setTime() throws HCSException
    Set the time on the controller using the current system clock.

public void setTime(Calendar cal) throws HCSException
    Set the time on the controller using the Java Calendar object.

public void setTime(int year, int month, int day, int dow, int hour,
		int minute, int second, int millisecond) throws HCSException
    Set the time on the controller using the input values.

public void setTimeFrequency(int frequency) throws HCSException
    Set how frequently the controller sends the time. 0:never, 1:every
    second, 2:every minute. This function additionally throws:
      HCSException.INVALIDARGUMENT - one of the input arguments fell outside
        its permitted range.
