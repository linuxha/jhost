// Copyright (C) 2001, Paul Tokarchuk
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// For updates check out the Creative Control Concepts web page at:
// http://www.cc-concepts.com
//
// Or to contact the author send email to ptokarchuk@sympatico.ca
//

// This is a trivial exception class, only declared so that it's possible
// to distinguish between exceptions generated by the javaHost code and
// exceptions generated elsewhere.
public class HCSException extends Exception
{
	public static final int BADREAD = 0;
	public static final int BADWRITE = 1;
	public static final int BADOPEN = 2;
	public static final int INVALIDARGUMENT = 3;
	public static final int BADINITIALIZATION = 4;
	public static final int BADACK = 5;
	public static final int BADFIRMWARE = 6;
	public static final int PROGRAMSIZE = 7;
	public static final int LOADERROR = 8;
	public static final int BADRESPONSE = 9;
	public static final int BADCOMMAND = 10;
	public static final int BADRESPONSESIZE = 11;
	public static final int RESPONSEMISMATCH = 12;
	public static final int INCOMPLETEREAD = 13;
	public static final int BADCLOSE = 14;
	public static final int BADRELEASE = 15;
	public static final int BADTHREAD = 16;
	public static final int BADOWNER = 17;
	public static final int BADFUNCTION = 18;
	public static final int PAUSED = 19;
	public static final int NOTOPEN = 20;
	public static final int BADCLASS = 21;
	public static final int BADMETHOD = 22;
	public static final int BADSECURITY = 23;
	public static final int UNKNOWN = 24;

	private int cause;

	public HCSException(int cause)
	{
		super(getString(cause));
		this.cause = cause;
	}

	public HCSException(int cause, String s)
	{
		super(s);
		this.cause = cause;
	}

	// HCSException.java:74: error: getCause() in HCSException cannot override getCause() in Throwable
	public int getCause() { return cause; }
	//         ^
	// return type int is not compatible with Throwable

	private static String getString(int cause)
	{
		switch (cause)
		{
			case BADREAD: return "Read failed.";
			case BADWRITE: return "Write failed.";
			case BADOPEN: return "Open failed.";
			case INVALIDARGUMENT: return "Invalid argument.";
			case BADINITIALIZATION: return "Initialization failed.";
			case BADACK: return "Controller failed to acknowledge properly.";
			case BADFIRMWARE: return "Firmware mismatch.";
			case PROGRAMSIZE: return "Program to large.";
			case LOADERROR: return "Error loading program to controller.";
			case BADRESPONSE: return "Inappropriate response from controller.";
			case BADCOMMAND: return "Response from controller does not match command sent.";
			case BADRESPONSESIZE: return "Incorrect number of bytes returned.";
			case RESPONSEMISMATCH: return "Returned data does not match requested data.";
			case INCOMPLETEREAD: return "Unable to read entire file.";
			case BADCLOSE: return "Close failed.";
			case BADRELEASE: return "Failed to release port.";
			case BADTHREAD: return "Thread not owner.";
			case BADOWNER: return "Object has not acquired the port.";
			case BADFUNCTION: return "BADFUNCTION.";
			case PAUSED: return "The controller is paused.";
			case NOTOPEN: return "The port is not open.";
			case BADCLASS: return "Could not find specified class.";
			case BADMETHOD: return "Could not find specified method.";
			case BADSECURITY: return "Security prohibits access to method.";
			default: return "unknown.";
		}
	}
}

