// Copyright (C) 2001, Paul Tokarchuk
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
//
// For updates check out the Creative Control Concepts web page at:
// http://www.cc-concepts.com
//
// Or to contact the author send email to ptokarchuk@sympatico.ca
//

// This is a trivial UI component which simply echos console messages
// generated by the controller. However, this is the heart of writing
// a UI which implements macros. All that's needed is to evaluate
// the string and then call out to the OS to do something. Of course
// macros could be initiated on any event and not just console messages.
import java.util.*;
import java.io.*;

public class consoleUI
{
	public consoleUI(HCSPortManager manager) throws HCSException
	{
		// Make sure that the port is opened.
		if ( !openPort(manager) ) return;

		// Wire up an HCSEventListener to listen to console messages.
		// On easch message print it to stdout.
		manager.addEventListener(HCSEvent.CONSOLEMESSAGE,
			new HCSEventListener() {
				public void portEvent(HCSEvent event)
				{
					// Use Runtime.exec() to launch an external process.
					System.out.println(event.message);
				}
		});
	}

	//
	// Several methods to help open the port.
	//
	private boolean openPort(HCSPortManager manager) throws HCSException
	{
		if ( manager == null )
			return false;

		Vector portList = manager.getPortList();
		System.out.println("Please select a port from the following list:");
		for (int i = 0; i < portList.size(); i++)
			System.out.println(i+1 + ") " + (String)portList.elementAt(i));

		int selection = inputInteger("Selection? ", 1, portList.size());
		if ( selection < 1 )
		{
			System.out.println("Failed.");
			return false;
		}
		manager.openPort((String)portList.elementAt(selection-1));

		return true;
	}

	private int inputInteger(String prompt, int min, int max)
	{
		int val = min-1;
		while (val < min || val > max )
		{
			String response = input(prompt);
			try { val = Integer.parseInt(response); }
			catch (Exception e) { val = min-1; break; }
		}
		return val;
	}

	private String input(String prompt)
	{
		System.out.print(prompt);

		// Clear out any old input.
		try { while ( System.in.available() > 0 ) System.in.read(); }
		catch (IOException e) { return ""; }

		int chr;
		StringBuffer buf = new StringBuffer();
		while ( true )
		{
			try { chr = System.in.read(); }
			catch (IOException e) { return new String(buf); }

			if ( chr == 0x0D || chr == 0x0A )
				break;
			if ( chr != -1 )
				buf.append( (char)chr );
		}
		return new String(buf);
	}

}

